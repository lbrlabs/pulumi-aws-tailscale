// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Bastion extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'tailscale-bastion:gcp:Bastion';

    /**
     * Returns true if the given object is an instance of Bastion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bastion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bastion.__pulumiType;
    }

    /**
     * The name of the autoscaler that manages the instances.
     */
    public /*out*/ readonly autoscalerName!: pulumi.Output<string>;
    /**
     * The name of the group manager that manages the instances.
     */
    public /*out*/ readonly groupManagerName!: pulumi.Output<string>;
    /**
     * The SSH private key to access your bastion.
     */
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    /**
     * The name of the target that manages the instances.
     */
    public /*out*/ readonly targetPoolName!: pulumi.Output<string>;

    /**
     * Create a Bastion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BastionArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.route === undefined) && !opts.urn) {
                throw new Error("Missing required property 'route'");
            }
            if ((!args || args.subnetNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetNetworkId'");
            }
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["route"] = args ? args.route : undefined;
            resourceInputs["subnetNetworkId"] = args ? args.subnetNetworkId : undefined;
            resourceInputs["autoscalerName"] = undefined /*out*/;
            resourceInputs["groupManagerName"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["targetPoolName"] = undefined /*out*/;
        } else {
            resourceInputs["autoscalerName"] = undefined /*out*/;
            resourceInputs["groupManagerName"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["targetPoolName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bastion.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Bastion resource.
 */
export interface BastionArgs {
    /**
     * The GCP machine type to launch. Defaults to f1-micro.
     */
    machineType?: pulumi.Input<string>;
    /**
     * The route you'd like to advertise via tailscale.
     */
    route: pulumi.Input<string>;
    /**
     * The subnetwork to create the bastion in.
     */
    subnetNetworkId: pulumi.Input<string>;
}
